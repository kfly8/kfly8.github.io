<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on kobaken&#39;s blog</title>
    <link>http://kfly8.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on kobaken&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 16 Nov 2013 18:18:56 +0900</lastBuildDate>
    <atom:link href="http://kfly8.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>TypeScriptさわるぞー #TODO</title>
      <link>http://kfly8.github.io/post/hello-typescript/</link>
      <pubDate>Sat, 16 Nov 2013 18:18:56 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/hello-typescript/</guid>
      <description>

&lt;p&gt;jsを大きな規模でもちゃんと動くようにしたいと、のたまったので、
偉い人たちが作ったaltjsを勉強させてもらいます　ref &lt;a href=&#34;http://kfly8.hatenablog.com/entry/2013/11/16/005340&#34;&gt;http://kfly8.hatenablog.com/entry/2013/11/16/005340&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/search?q=%23%E7%99%BA%E7%81%AB%E6%9D%91&amp;amp;src=hash&#34;&gt;#発火村&lt;/a&gt; 中、id:gfx 先生におすすめしてもらった&lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;を見てみます＞＜&lt;/p&gt;

&lt;p&gt;ぱっと見: # TODO&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jsのsuperset&lt;/li&gt;
&lt;li&gt;見た目はほとんど一緒&lt;/li&gt;
&lt;li&gt;I/Fに型を添えて分かりやすくしている&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;導入:16f5c50449091024254daf50b90fa107&#34;&gt;導入&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% npm install -g typescript
% cat &amp;gt; hello.ts
function hello(s: string) {
  return &#39;hello &#39; + s;
}
console.log(hello(&#39;typescript&#39;));
^D
% tsc hello.ts
% node hello.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;grunt-typescrpt:16f5c50449091024254daf50b90fa107&#34;&gt;grunt-typescrpt&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install grunt-typescript
https://github.com/kfly8/ts-sample
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;typescriptのドキュメントのメモ:16f5c50449091024254daf50b90fa107&#34;&gt;TypeScriptのドキュメントのメモ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.typescriptlang.org/Content/TypeScript%20Language%20Specification.pdf&#34;&gt;http://www.typescriptlang.org/Content/TypeScript%20Language%20Specification.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;TODO あとで読みやすくして、検証する、、、ほとんどこぴぺだよ、やばいよやばいよ&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;types:16f5c50449091024254daf50b90fa107&#34;&gt;Types&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// primitive type. ( number, boolean, string, void, null and undefined and user defined enum types)
function hello(str: string) {
    return &#39;hello&#39; + str;
}

// function type
function hoge(callback: (result: string) =&amp;gt; any ) {
    ...
}

hoge(function(result: string) {
    ...
});

// object type

// * object type literal ( ObjectType,ArrayType,FunctionType and ConstructorType  )
var aaa: () =&amp;gt; {
    x: number; y: number;
};

// * object type interface // PerlのMouseTypeみたい
interface Friend {
    name: string;
    birthday?: string; # optional field
}

function add(friend: Friend) {
    var name = friend.name;
}

add({ name: &#39;taro&#39; });
add({ birthday: &#39;20130101&#39; }); # error, name required
add({ name: &#39;hanako&#39;, birthday: &#39;20130201&#39; });


// Structial Subtypes

interface Point {
    x: number;
    y: nubmer;
}

function getX(p: Point) {
}

Class CPoint {
    x: number;
    y: number;
    constructor(x: number, y: number) {
        this.x = x;
        this.y = y;
    }
}

getX(new CPoint(0,0)); // ok!!
getX({ x: 1, y: 2: z: 3); // ok!! Extra fields ok
getX({ x: 1 ); // ng!! supplied parameter&#39;s not Point

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;class-module:16f5c50449091024254daf50b90fa107&#34;&gt;Class &amp;amp;&amp;amp; Module&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Animal {
    constructor(public age: number) {
    }
    addAge(amount: number) {
        this.age += amount;
        return this.age;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Animal = (function () {
    function Animal() {
        this.age = 0;
    }
    Animal.prototype.addAge = function(amount) {
        this.age += amount;
        return this.age;
    };
    return Animal;
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module Hoge {
    var s = &amp;quot;hello&amp;quot;;
    export function f() {
        return s;
    }
}

Hoge.f();
Hoge.s; // Error, s is not exported // variable &#39;s&#39; is private
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Hoge;
(function(exports) {
    var s = &amp;quot;hello&amp;quot;;
    function f() {
        return s;
    }
    exports.f = f;
})(Hoge||(Hoge={}));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;declare:16f5c50449091024254daf50b90fa107&#34;&gt;declare&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;declare var document;
document.title = &amp;quot;Hello&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;外部モジュール:16f5c50449091024254daf50b90fa107&#34;&gt;外部モジュール&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;# File main.ts:
import log = require(&amp;quot;log&amp;quot;);
log.message(&amp;quot;hello&amp;quot;);

# File log.ts:
export function message(s: string) {
    console.log(s);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
# point.ts
export = Point;
class Point {
    constructor(public x: number, public y: number) { }
    static origin = new Point(0, 0);
}

# use
import Pt = require(&amp;quot;point&amp;quot;);
var p1 = new Pt(10, 20);
var p2 = Pt.origin;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://atnd.org/events/43858&#34;&gt;温泉発火村&lt;/a&gt;なう&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://instagram.com/p/gw7VF5IDPl/&#34;&gt;&lt;img src=&#34;http://instagram.com/p/gw7VF5IDPl/media/?size=l&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://instagram.com/p/gw7VF5IDPl/&#34;&gt;#発火村 ！！！！！！！！！！！&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>大規模なjsってどうして書きにくい？</title>
      <link>http://kfly8.github.io/post/why-difficult-to-write-js/</link>
      <pubDate>Sat, 16 Nov 2013 00:53:40 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/why-difficult-to-write-js/</guid>
      <description>

&lt;p&gt;フロントサイドでの話です。&lt;/p&gt;

&lt;p&gt;そんな話を、id:karupanerura と&lt;a href=&#34;http://www.zusaar.com/event/1737003&#34;&gt;#isucon反省会&lt;/a&gt;帰り、東海道線で話した&lt;/p&gt;

&lt;p&gt;２人で話した答え:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「パッケージの責任範囲を小さくするベストプラクティスが分からない」&lt;/li&gt;
&lt;li&gt;つまりは「コードを読む範囲を小さくしたい」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所感:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;よしなに&amp;rdquo;やってくれるって、&amp;rdquo;なんかこわい&amp;rdquo;

&lt;ul&gt;
&lt;li&gt;jsのフロントサイドのライブラリって何となくそういうの多い気がする&lt;/li&gt;
&lt;li&gt;作るのも大変&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CPANのように客観的によくテストする仕組みがあれば、使う人も作る人も幸せになれる？&lt;/li&gt;
&lt;li&gt;一つのことを上手くやる小さなモジュールを組み合わせたい&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;どうやって解決するか:a4a4c87ac166d9b91d6cbdab97b38561&#34;&gt;どうやって解決するか？&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;モジュールを決められた仕様で書いて、requireして使うcommonjsライクがいいんでは？と話した

&lt;ul&gt;
&lt;li&gt;モジュール毎にHTTP Requestするのはいやなので、concatとかもしやすくしたい&lt;/li&gt;
&lt;li&gt;【追記】せっかく非同期に読み込むこともできるのだから、依存関係解決しながらいい感じに読み込むめばいいのか、、と思うと、require.jsでいいのか 、、このサポートのことは一旦忘れよう、&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例えば、以下のようにfoo,bar.jsというモジュールを作り、、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# lib/foo.js
exports.foo = function() {...};
# lib/bar.js
exports.bar = function() {...};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;package.jsonやcpanfileのようなpackagefileを書くと、、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;require lib/foo.js;
require lib/bar.js;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gruntのようなビルドツールでビルドして、、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# generate file
SHELL% BUILD aaa # generate aaa.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;requireして、各モジュールが使える&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;# some.html
&amp;lt;script src=&amp;quot;aaa.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
(function() {
    var foo = aaa.require(&#39;foo&#39;); # source.mapも利用しやすいはず
    var bar = aaa.require(&#39;bar&#39;);
})();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テストは、npm test とか&lt;/p&gt;

&lt;h1 id=&#34;最後:a4a4c87ac166d9b91d6cbdab97b38561&#34;&gt;最後&lt;/h1&gt;

&lt;p&gt;上のようなことなら、個人でやる分には素直に書けるけど、、最初の命題に対するアプローチどうなんだろうか、、？jsの何が一番いけてない？&lt;/p&gt;

&lt;p&gt;すばらしいライブラリやaltjsがあるというのに、jsを書くというアプローチ、、
悪い言い方ですが、臭いモノの蓋を開けても、そんなに臭わないようにしたいなーというそんな願望の現れです。かっこつければ、js書くのが楽しくなれば、それはそれで意義深いかも？！という感じでございます。&lt;/p&gt;

&lt;p&gt;以上！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>