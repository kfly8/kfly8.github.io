<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kobaken&#39;s blog</title>
    <link>http://kfly8.github.io/</link>
    <description>Recent content on kobaken&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 20 Dec 2015 20:43:25 +0900</lastBuildDate>
    <atom:link href="http://kfly8.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About Dancer2(ja)</title>
      <link>http://kfly8.github.io/post/about-dancer2/</link>
      <pubDate>Sun, 20 Dec 2015 20:43:25 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/about-dancer2/</guid>
      <description>

&lt;p&gt;この記事は、&lt;a href=&#34;http://qiita.com/advent-calendar/2015/perl5&#34;&gt;Perl5 Advent Calendar 2015&lt;/a&gt; の20日目の記事です。&lt;/p&gt;

&lt;p&gt;Web Application Framework の Dancer2 について紹介したいと思います。&lt;/p&gt;

&lt;p&gt;まずは、YAPC::Asia 2014 の LT から。
こちらは、Dancer2 のリリースマネージャーの &lt;a href=&#34;https://twitter.com/perlsawyer&#34;&gt;SawyerX&lt;/a&gt; による、Dancer2の超速紹介です。
Dancer2 の要点が凝縮されたLTです。&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/0gapHdDTRUk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;目を凝らすとこんなスライドが見えます。DSLで、ルーティングを記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;package MyApp;
use Dancer2;

get &#39;/&#39; =&amp;gt; sub {
   template index =&amp;gt; {
      name =&amp;gt; &#39;Sawyer X&#39;,
      event =&amp;gt; &#39;YAPC::Asia&#39;
   }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSON を返却するようなAPIも簡単に用意できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;package MyApp::API;
use Dancer2;

set serializer =&amp;gt; &#39;JSON&#39;;

get &#39;/&#39; =&amp;gt; sub {
    return {
        hello =&amp;gt; &#39;world&#39;,
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dancer2 は Plack化されているので、plackupできます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;# app.psgi
use MyApp;
my $app = MyApp-&amp;gt;psgi_app;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;plackup app.psgi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまでが、LTの抜粋です。&lt;/p&gt;

&lt;p&gt;Dancer2 は、元々、Ruby のSinatra を Perl に port した Dancer の次バージョンです。
Dancer の DSL はほぼそのままに、設計面での調整が大幅に入っています&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://advent.perldancer.org/2014/2&#34;&gt;http://advent.perldancer.org/2014/2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例えば、以下のような対応が行われています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plack 対応&lt;/li&gt;
&lt;li&gt;DSL 実装を、Top 空間から、Dancer2::Core::DSL に分解&lt;/li&gt;
&lt;li&gt;Moo 採用&lt;/li&gt;
&lt;li&gt;デザインパターンの調整（デメテルの法則&amp;hellip;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この対応に関して、2011 年の Dancer Advent Calendar にて、（超訳ですが）「全部書き換えるぞい」という記事があります。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://advent.perldancer.org/2011/8&#34;&gt;http://advent.perldancer.org/2011/8&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;利用者が多数のプロダクトにおいて、こういった完全な書き換えは、個人的な興味をそそりました。
今現在も活発に開発され、Dancer という名前を冠するPerl &lt;a href=&#34;https://www.perl.dance/&#34;&gt;カンファレンス&lt;/a&gt;も開かれています。&lt;/p&gt;

&lt;p&gt;Dancer を作った sukria のポスト。&lt;/p&gt;

&lt;iframe src=&#34;//blog.sukria.net/2015/10/22/perl-dancer-2015-report/embed/&#34;
  class=&#34;wp-embedded-content&#34;
  frameborder=&#34;0&#34;
  scrolling=&#34;no&#34;
  style=&#34;display: block; width: 100%; height: 338px; max-width: 600px; margin: 10px 0px;&#34;
&gt;&lt;/iframe&gt;



&lt;p&gt;最近の開発状況の話。&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/UbU5R-SHbDE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;（Dancer2::XS ってあって、すごいってなった）&lt;/p&gt;

&lt;p&gt;もう少し、Dancer2 の特徴を触れて、記事を終わりにしたいと思います。
（と言っても、ほぼ、&lt;a href=&#34;http://advent.perldancer.org/2014&#34;&gt;2014 年の dancer advent calendar&lt;/a&gt; ((SawyerX の一人アドベントカレンダー。つよい。)) からの抜粋です。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://advent.perldancer.org/2014/5&#34;&gt;http://advent.perldancer.org/2014/5&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;fatpack、つまり一枚スクリプトにするのをサポートしています。
（なので、XSモジュールは、recommend 扱いです）&lt;/p&gt;

&lt;p&gt;ポータビリティを考えると良い選択になるかもしれません。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://advent.perldancer.org/2014/16&#34;&gt;http://advent.perldancer.org/2014/16&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;コマンドラインで利用も考慮されています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use Dancer2;

warn config-&amp;gt;{environment}; # =&amp;gt; development
warn dancer_version;        # =&amp;gt; 0.165000
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://advent.perldancer.org/2014/10&#34;&gt;http://advent.perldancer.org/2014/10&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;複数のアプリケーションの同居が考慮されています。
Dancer2 に appname を渡すことで、config やdbh などが、appname ごとに管理されます。&lt;/p&gt;

&lt;p&gt;以下の例だと、
MyApp::Foo1, Foo2 で、一つの Dancer2::Core::App obj が作られ、
Bar にもう一つの Dancer2::Core::App obj が作られます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;package MyApp::Foo1 {
  use Dancer2 appname =&amp;gt; &#39;foo&#39;;
  get &#39;/&#39; =&amp;gt; sub { ... }
}

package MyApp::Foo2 {
  use Dancer2 appname =&amp;gt; &#39;foo&#39;;
  get &#39;/&#39; =&amp;gt; sub { ... }
}

package MyApp::Bar {
  use Dancer2;
  get &#39;/&#39; =&amp;gt; sub { ... }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;まとめ:d5fa33a926e58371ddf4a9e076d3305f&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;なんだか Dancer2 楽しそうだぞ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;明日は、&lt;a href=&#34;https://twitter.com/akihiro_0228&#34;&gt;akihiro_0228&lt;/a&gt; さんです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>設定とFixture</title>
      <link>http://kfly8.github.io/post/setting-and-fixture/</link>
      <pubDate>Wed, 02 Dec 2015 18:53:37 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/setting-and-fixture/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;この記事は、&lt;a href=&#34;http://qiita.com/advent-calendar/2015/mobilefactory&#34;&gt;モバイルファクトリー Advent Calendar 2015&lt;/a&gt; 2日目の記事です&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;昨日は、nekobato さんの &lt;a href=&#34;http://qiita.com/nekobato/items/0cd3ed1742310f74653c&#34;&gt;superagentとaxiosの使い分け&lt;/a&gt; でした&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2014/perl&#34;&gt;Perl Advent Calender 2014&lt;/a&gt; の最高の記事の
&lt;a href=&#34;http://www.songmu.jp/riji/entry/2014-12-25-test-anything.html&#34;&gt;ソースコード以外もとにかくテストする。もしくはカバレッジだけではダメだという話&lt;/a&gt; から、
&lt;code&gt;アプリケーション設定ファイルのテスト&lt;/code&gt; と &lt;code&gt;Fixtureのテスト&lt;/code&gt; の例を書いてみたいと思います&lt;/p&gt;

&lt;h1 id=&#34;アプリケーション設定ファイルのテスト:d08054f2f5aa943738fabfb18293ec30&#34;&gt;アプリケーション設定ファイルのテスト&lt;/h1&gt;

&lt;p&gt;本番環境、開発環境、テスト環境で設定が過不足がないかチェックするため、
&lt;a href=&#34;https://metacpan.org/pod/Test%3A%3ADeep&#34;&gt;Test::Deep&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/Test%3A%3ADeep%3A%3AMatcher&#34;&gt;Test::Deep::Matcher&lt;/a&gt; を利用しています&lt;/p&gt;

&lt;p&gt;テストの流れとしては&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;本番環境の設定値を、Test::Deep::Matcher のmatcher に変換&lt;/li&gt;
&lt;li&gt;開発環境、テスト環境の設定値が、matcher にあうか比較&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;です&lt;/p&gt;

&lt;p&gt;例えば、以下のような本番設定があったとして..&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;# production.pl
{
  servers =&amp;gt; [
    &#39;XX.XX.XXX.XXX:11211&#39;,
    &#39;XX.XX.XXX.YYY:11211&#39;,
  ],
  options =&amp;gt; {
    utf8 =&amp;gt; 1,
  },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再帰的にmatcherに変換してあげます&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use Test::Deep::Matcher;
use Test::Deep qw//;

sub convert_matcher {
    my $v = shift;

    if (!ref $v) {
        return Data::Util::is_integer($v) ? is_integer
             : Data::Util::is_number($v)  ? is_number
             : Data::Util::is_string($v)  ? is_string
             : Data::Util::is_value($v)   ? is_value
             : undef;
    }
    elsif(ref $v eq &#39;ARRAY&#39;) {
        return Test::Deep::array_each(convert_matcher($v-&amp;gt;[0])) # XXX: 仮定
    }
    elsif(rev $v eq &#39;HASH&#39;) {
        return +{ map { $_ =&amp;gt; convert_matcher($v-&amp;gt;{$_}) } keys %$v }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは比較するだけです&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $expect = convert_matcher($production_conf)
cmp_deeply $development_conf, $expect;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;余談:d08054f2f5aa943738fabfb18293ec30&#34;&gt;(余談)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上の例では、本番環境の設定から(雑な)型推定をしました&lt;/li&gt;
&lt;li&gt;設定の型定義を用意しておけるなら、その方が良いかもしれません

&lt;ul&gt;
&lt;li&gt;異常値などの定義をしやすいですし&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下、&lt;code&gt;crystal&lt;/code&gt; の例です&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &amp;quot;json&amp;quot;

class Config
  JSON.mapping({
    servers: String,
    options: { type: ServerOptions },
  })
end

class ServerOptions
  JSON.mapping({
    utf8: Int32
  })
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;fixture-のテスト:d08054f2f5aa943738fabfb18293ec30&#34;&gt;Fixture のテスト&lt;/h1&gt;

&lt;p&gt;リレーションチェックのため、
&lt;a href=&#34;https://metacpan.org/pod/DBIx%3A%3ASchema%3A%3ADSL&#34;&gt;DBIx::Schema::DSL&lt;/a&gt;, &lt;a href=&#34;https://metacpan.org/pod/SQL%3A%3ATranslator%3A%3ASchema&#34;&gt;SQL::Translator::Schema&lt;/a&gt; を利用しています&lt;/p&gt;

&lt;p&gt;チェックには、外部キー制約を利用します
実際のアプリケーションでの利用は、&lt;a href=&#34;http://connpass.com/event/11463/&#34;&gt;諸事情&lt;/a&gt; でしていないですが、
テストでの利用では最高に便利です
(この辺の外部キーありなしのスイッチを、&lt;code&gt;no_fk_output/output&lt;/code&gt; だけで簡単にできるのが、&lt;code&gt;DBIx::Schema::DSL&lt;/code&gt; めっちゃ便利だーってなって便利です)&lt;/p&gt;

&lt;p&gt;流れは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;外部キー制約つきのスキーマを用意して、&lt;code&gt;INSERT&lt;/code&gt; する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だけです。
ただ、エラーメッセージを、人間が読みやすい形にするため、地味にループを回すようなコードにしています:p&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;# Schema
use 5.014002;
package MyProj::DB::Schema {
    use DBIx::Schema::DSL;

    create_table &#39;module&#39; =&amp;gt; columns {
        integer &#39;id&#39;, primary_key, auto_increment;
        varchar &#39;name&#39;;
        integer &#39;author_id&#39;;

        add_index &#39;author_id_idx&#39; =&amp;gt; [&#39;author_id&#39;];

        belongs_to &#39;author&#39;;
    };

    create_table &#39;author&#39; =&amp;gt; columns {
        integer &#39;id&#39;, primary_key, auto_increment;
        varchar &#39;name&#39;, unique;
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;# belongs_to.t

$db-&amp;gt;execute(MyProj::DB::Schema-&amp;gt;output);

my $schema         = MyProj::DB::Schema-&amp;gt;context-&amp;gt;schema;
my $module_schema  = $schema-&amp;gt;get_table(&#39;module&#39;);
my $constraints    = $module_schema-&amp;gt;fkey_constraints;

for my $fkey (@$constraints) {
    my $ref_table = $fkey-&amp;gt;reference_table;

    my @errors = try_load($ref_table);
    ok !@errors
       or note explain @errors;
}

sub try_load {
    my ($table) = @_;

    my @errors;
    for my $row (@{$FIXTURE_DATA{$table}}) {
        try {
            $db-&amp;gt;insert($table =&amp;gt; $row);
        }
        catch {
            push @errors =&amp;gt; shift;
        };
    }
    return @errors;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;まとめ:d08054f2f5aa943738fabfb18293ec30&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;アプリケーション設定ファイルのテスト&lt;/code&gt; と &lt;code&gt;Fixtureのテスト&lt;/code&gt; の実装例を紹介しました&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;明日は、 nekobato さんです!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello, Crystal</title>
      <link>http://kfly8.github.io/post/hello-crystal/</link>
      <pubDate>Wed, 02 Dec 2015 18:39:52 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/hello-crystal/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;この記事は &lt;a href=&#34;http://www.adventar.org/calendars/800&#34;&gt;Crystal Advent Calendar 2015&lt;/a&gt; の 2 日目の記事です&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;昨日は、&lt;a href=&#34;https://twitter.com/pine613&#34;&gt;pine613&lt;/a&gt; さんの &lt;a href=&#34;http://qiita.com/pine613/items/7407e56771b504bed82f&#34;&gt;これから Crystal を始める方へ: Crystal 日本語情報まとめ&lt;/a&gt; でした。
&lt;a href=&#34;http://ja.crystal-lang.org&#34;&gt;公式ドキュメントの日本語訳&lt;/a&gt;が整っているの素敵ですね!!&lt;/p&gt;

&lt;p&gt;今日は、crystal の setup から、heroku に deploy するまで、です。
完全、後発です。厳しいです。詳しいことは、↓を見ると良いのではないでしょうか!?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://subvisual.co/blog/posts/63-deploying-a-crystal-application-to-heroku&#34;&gt;deploying-a-crystal-application-to-heroku&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://zephiransas.github.io/blog/2015/11/10/crystal-on-heroku/&#34;&gt;crystal-on-heroku&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;setup:655554d8faba66a38325aa6a7a1bf315&#34;&gt;setup&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;*env 最高&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% anyenv install crenv
% crenv install 0.9.1
% crenv rehash
% crystal -v
Crystal 0.9.1 [b3b1223] (Fri Oct 30 03:26:53 UTC 2015)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;initialize-app:655554d8faba66a38325aa6a7a1bf315&#34;&gt;initialize app&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% crystal init app app # `app` という名前のapplication の雛形用意
% cd app
% git commit -m &#39;initial commit&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;create-app:655554d8faba66a38325aa6a7a1bf315&#34;&gt;create app&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;crystal-lang.org の冒頭のHello返すだけのHTTP server に OptionParserでport食わせられるようにしただけ&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;% cat src/app.cr

require &amp;quot;http/server&amp;quot;
require &amp;quot;option_parser&amp;quot;

port = 8080
OptionParser.parse! do |parser|
  parser.on(&amp;quot;-p PORT&amp;quot;, &amp;quot;--port=PORT&amp;quot;, &amp;quot;Set server port&amp;quot;) { |p| port = p.to_i }
end

server = HTTP::Server.new(&amp;quot;0.0.0.0&amp;quot;, port) do |req|
  HTTP::Response.ok &amp;quot;text/plain&amp;quot;, &amp;quot;Hello&amp;quot;
end

puts &amp;quot;Listening on http://0.0.0.0:#{port}&amp;quot;
server.listen
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;試しに実行してみる&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;# 即時実行
% crystal run src/app.cr
Listening on http://0.0.0.0:8080

# ビルドしてあげる
% crystal build src/app.cr
% ./app -p 5000
Listening on http://0.0.0.0:5000
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;deploy-to-heroku:655554d8faba66a38325aa6a7a1bf315&#34;&gt;deploy to heroku&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Procfile とりあえず用意して、手元の環境で、ps 動かしてみる&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% cat Procfile
web: ./app -p $PORT
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% heroku local
forego | starting web.1 on port 5000
web.1  | Listening on http://0.0.0.0:5000
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;% git add .
% git commit -m &#39;update&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;heroku-create:655554d8faba66a38325aa6a7a1bf315&#34;&gt;heroku create&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;↓のカスタムビルドは、適宜・・好きなのを用意してください

&lt;ul&gt;
&lt;li&gt;今回は手抜きで、crystal version が、手元では、&lt;code&gt;0.9.1&lt;/code&gt; だけど、&lt;code&gt;0.9.0&lt;/code&gt; でビルドされるカスタムビルドパックを利用しました:p&lt;/li&gt;
&lt;li&gt;今回のカスタムビルドの要件は、&lt;code&gt;0.9.0&lt;/code&gt; でのビルド。&lt;code&gt;shard.yml&lt;/code&gt; があること。&lt;code&gt;./src/app.cr&lt;/code&gt; がソースファイルで、 &lt;code&gt;./app&lt;/code&gt; にリリースビルドされて、&lt;code&gt;Procfile&lt;/code&gt; で &lt;code&gt;./app&lt;/code&gt; を呼び出している感じですね。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;% heroku create --buildpack https://github.com/scaint/heroku-buildpack-crystal.git
% git push heroku master

Counting objects: 16, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (10/10), done.
Writing objects: 100% (16/16), 306.50 KiB | 0 bytes/s, done.
Total 16 (delta 0), reused 0 (delta 0)
remote: Compressing source files... done.
remote: Building source:
remote:
remote: -----&amp;gt; Fetching set buildpack https://github.com/scaint/heroku-buildpack-crystal.git... done
remote: -----&amp;gt; Crystal app detected
remote: -----&amp;gt; Installing Crystal 0.9.0
remote: -----&amp;gt; Installing Shards 0.5.3
remote: -----&amp;gt; Installing Dependencies
remote: -----&amp;gt; Compiling src/app.cr
remote:
remote: -----&amp;gt; Discovering process types
remote:        Procfile declares types -&amp;gt; web
remote:
remote: -----&amp;gt; Compressing... done, 409K
remote: -----&amp;gt; Launching... done, v3
remote:        https://arcane-harbor-8307.herokuapp.com/ deployed to Heroku
remote:
remote: Verifying deploy... done.
To https://git.heroku.com/arcane-harbor-8307.git
 * [new branch]      master -&amp;gt; master
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;% heroku open
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;反省:655554d8faba66a38325aa6a7a1bf315&#34;&gt;反省&lt;/h1&gt;

&lt;p&gt;アドベントカレンダー事前に準備する&lt;/p&gt;

&lt;p&gt;明日は、　5t111111　さんです！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DBIx::Schema::DSL::Dumper というのを書きました</title>
      <link>http://kfly8.github.io/post/dbix-schema-dsl-dumper/</link>
      <pubDate>Wed, 04 Feb 2015 21:00:12 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/dbix-schema-dsl-dumper/</guid>
      <description>&lt;p&gt;songmuさんの書いた&lt;a href=&#34;https://github.com/Songmu/p5-DBIx-Schema-DSL&#34;&gt;DBIx::Schema::DSL&lt;/a&gt;
を使いたい状況が出て来て、
すでに結構もりもり書かれてたDDLを移行する為に書いてみました。&lt;/p&gt;

&lt;p&gt;使い方は、&lt;a href=&#34;http://search.cpan.org/~satoh/Teng-0.19/lib/Teng/Schema/Dumper.pm&#34;&gt;Teng::Schema::Dumper&lt;/a&gt;
と同じように、&lt;code&gt;$dbh&lt;/code&gt; を渡すだけで、DSLが吐き出せます。&lt;/p&gt;

&lt;p&gt;雰囲気は次のような感じです！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use DBI;
use DBIx::Schema::DSL::Dumper;

my $dbh = DBI-&amp;gt;connect(&#39;dbi:mysql:dbname=test&#39;, &#39;root&#39;, &#39;&#39;);
print DBIx::Schema::DSL::Dumper-&amp;gt;dump(
    dbh =&amp;gt; $dbh,
    pkg =&amp;gt; &#39;Foo::DSL&#39;,
);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よかったら使ってほしいです！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>間接オブジェクト記法のアンチパターン</title>
      <link>http://kfly8.github.io/post/indirect-object-notation/</link>
      <pubDate>Wed, 17 Dec 2014 12:54:09 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/indirect-object-notation/</guid>
      <description>

&lt;p&gt;この記事は &lt;a href=&#34;http://qiita.com/advent-calendar/2014/perl&#34;&gt;Perl Advent Calendar 2014&lt;/a&gt; の 17日目 の記事です。&lt;/p&gt;

&lt;p&gt;16日目の記事は &lt;a href=&#34;http://qiita.com/magnolia_k_&#34;&gt;magnolia&lt;em&gt;k&lt;/em&gt;&lt;/a&gt; さんの &lt;a href=&#34;http://qiita.com/magnolia_k_/items/b0a14e29c8090568f5b3&#34;&gt;perlの関数を第一級オブジェクトとして扱う話&lt;/a&gt; でした&lt;/p&gt;

&lt;h1 id=&#34;目次:ed130a5c49b36845906533f63e9cb3a3&#34;&gt;目次&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section1&#34;&gt;はじめに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section2&#34;&gt;間接オブジェクト記法ってそもそも何？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section3&#34;&gt;間接オブジェクト記法が活きる例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section4&#34;&gt;ハマる例1 Try::Tiny のuse 漏れ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section5&#34;&gt;余談 code block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section6&#34;&gt;ハマる例2? UNIVERSAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section7&#34;&gt;ハマる例3 テストにて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section8&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section9&#34;&gt;明日&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;a-name-section1-はじめに-a:ed130a5c49b36845906533f63e9cb3a3&#34;&gt;&lt;a name=&#34;section1&#34;&gt;はじめに&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;15日目の記事の id:akihiro0228 さんの記事を読んで、
&lt;iframe src=&#34;//akihiro0228.hatenablog.com/embed/2014/12/15/221806&#34;
 class=&#34;embed-card embed-blogcard&#34;
 scrolling=&#34;no&#34;
 frameborder=&#34;0&#34;
 style=&#34;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&#34;
&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;自分がよくハマってしまう&lt;a href=&#34;http://perldoc.jp/docs/perl/5.8.8/perlobj.pod#Indirect32Object32Syntax&#34;&gt;間接オブジェクト記法&lt;/a&gt;について紹介したいと思います。
&lt;b&gt;便乗です！&lt;/b&gt;&lt;/p&gt;

&lt;h1 id=&#34;a-name-section2-間接オブジェクト記法ってそもそも何-a:ed130a5c49b36845906533f63e9cb3a3&#34;&gt;&lt;a name=&#34;section2&#34;&gt;間接オブジェクト記法ってそもそも何？&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;メソッドを呼び出しの別表現です&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;$obj-&amp;gt;method($a, $b); # 普段の呼び出し

method $obj $a, $b;   # 間接オブジェクト記法
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一番なじみやすい例はnewだと思います&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my $dog = new Dog;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;普段は、誤読につながりやすいのであまり使うことをおすすめしないです
ですが、意図せず間接オブジェクト記法な呼び出しにしてしまったり、
この表現の方が簡潔に書ける例もあったりするので紹介してみたいと思います&lt;/p&gt;

&lt;h1 id=&#34;a-name-section3-間接オブジェクト記法が活きる例-a:ed130a5c49b36845906533f63e9cb3a3&#34;&gt;&lt;a name=&#34;section3&#34;&gt;間接オブジェクト記法が活きる例&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;定数を扱う時に便利なconstantプラグマを使ってみます
普段使う時は、以下のような感じで使うと思います&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use constant FOO =&amp;gt; &#39;foo&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを動的に定数定義してみたいとします&lt;/p&gt;

&lt;p&gt;動的に定義したい場合は
&lt;code&gt;use XXX&lt;/code&gt; は、&lt;code&gt;BEGIN { require XXX; do { XXX-&amp;gt;import } }&lt;/code&gt; のsugarなので、
このsugarをほどいて１つ１つ自分で順に追ってやれば変数だったりが使えます&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;package XXX;

BEGIN {
    require constant;
    constant-&amp;gt;import(FOO =&amp;gt; &#39;foo&#39; x 4);
}

say FOO; # =&amp;gt; foofoofoofoo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;間接オブジェクト記法を使ってみると以下のようになります&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;package YYY;

BEGIN {
    require constant;
    import constant FOO =&amp;gt; &#39;foo&#39; x 4;
}

say FOO; # =&amp;gt; foofoofoofoo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうですかね？
普段のconstantプラグマの使い方に近く、簡潔に書けているように思います&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;逆に今度は、よくあるハマる例を書いてみます&lt;/p&gt;

&lt;h1 id=&#34;a-name-section4-ハマる例1-try-tiny-のuse-漏れ-a:ed130a5c49b36845906533f63e9cb3a3&#34;&gt;&lt;a name=&#34;section4&#34;&gt;ハマる例1 Try::Tiny のuse 漏れ&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;ずばり、 id:karupanerura 先生の話を例を取ってみます。&lt;/p&gt;

&lt;iframe src=&#34;//techblog.karupas.org/embed/20111117/1321542949&#34;
 class=&#34;embed-card embed-blogcard&#34;
 scrolling=&#34;no&#34;
 frameborder=&#34;0&#34;
 style=&#34;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&#34;
&gt;&lt;/iframe&gt;


&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use strict;
use warnings;
use utf8;
use feature &#39;say&#39;;

# XXX わざとuseしないで、errorを起こす
#use Try::Tiny;

try {
    say &#39;foo&#39;;
    say &#39;bar&#39;;
}
# =&amp;gt;
# foo
# bar
# Can&#39;t locate object method &amp;quot;try&amp;quot; via package &amp;quot;1&amp;quot; (perhaps you forgot to load &amp;quot;1&amp;quot;?) at try2.pl line 6.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このエラーだとよくわからないので、
7日目の id:papix さんと11日目の id:hisaichi5518 さんが紹介しているB::Deparseを使います&lt;/p&gt;

&lt;iframe src=&#34;//papix.hatenablog.com/embed/2014/12/07/150335&#34;
 class=&#34;embed-card embed-blogcard&#34;
 scrolling=&#34;no&#34;
 frameborder=&#34;0&#34;
 style=&#34;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&#34;
&gt;&lt;/iframe&gt;


&lt;iframe src=&#34;//hisaichi5518.hatenablog.jp/embed/2014/12/11/222358&#34;
 class=&#34;embed-card embed-blogcard&#34;
 scrolling=&#34;no&#34;
 frameborder=&#34;0&#34;
 style=&#34;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&#34;
&gt;&lt;/iframe&gt;


&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;# perl -MO=Deparse %

use utf8;
use warnings;
use strict;
use feature &#39;say&#39;;
do {
    say &#39;foo&#39;;
    say &#39;bar&#39;
}-&amp;gt;try;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;do の最後に評価された 1 を package として、1-&amp;gt;try みたいなことをしています&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Can&#39;t locate object method &amp;quot;try&amp;quot; via package &amp;quot;1&amp;quot; (perhaps you forgot to load &amp;quot;1&amp;quot;?) at try2.pl line 6.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;package&lt;/code&gt;が1だとちょっと分かりにくいと思うので、
次の例を見てみてください&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use strict;
use warnings;
use utf8;
use feature &#39;say&#39;;

#use Try::Tiny;

try {
    say &#39;foo&#39;;
    bless {}, &#39;foo&#39;; # XXX obj を最後においてやる
}
# =&amp;gt;
# foo
# Can&#39;t locate object method &amp;quot;try&amp;quot; via package &amp;quot;foo&amp;quot; at try2.pl line 6.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deparse すると以下のようになります&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use utf8;
use warnings;
use strict;
use feature &#39;say&#39;;
do {
    say &#39;foo&#39;;
    bless {}, &#39;foo&#39;
}-&amp;gt;try;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今度のエラーと、Deparse した例を見ると、foo-&amp;gt;try と呼び出しされたことが分かってもらえると思います&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Can&#39;t locate object method &amp;quot;try&amp;quot; via package &amp;quot;foo&amp;quot; at try2.pl line 6.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後にちゃんと &lt;code&gt;use Try::Tiny&lt;/code&gt; した例です&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use strict;
use warnings;
use utf8;
use feature &#39;say&#39;;

use Try::Tiny;

try {
    say &#39;foo&#39;;
    bless {}, &#39;foo&#39;;
}
# =&amp;gt; foo
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;# perl -MO=Deparse %

use utf8;
use Try::Tiny;
use warnings;
use strict;
use feature &#39;say&#39;;
try sub {
    say &#39;foo&#39;;
    bless {}, &#39;foo&#39;;
}
;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deparse したコードを見ると、try に coderef が渡されていることが分かると思います&lt;/p&gt;

&lt;h1 id=&#34;a-name-section5-余談-code-block-a:ed130a5c49b36845906533f63e9cb3a3&#34;&gt;&lt;a name=&#34;section5&#34;&gt;余談 code block&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://metacpan.org/source/DOY/Try-Tiny-0.22/lib/Try/Tiny.pm#L24&#34;&gt;Try::Tiny の try のコード&lt;/a&gt;
を見ると、次のようにサブルーチン名に&lt;code&gt;(&amp;amp;;@)&lt;/code&gt;といった指定がされています&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;sub try (&amp;amp;;@) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これはプロトタイプと呼ばれるものです
&amp;gt; &lt;a href=&#34;http://perldoc.jp/docs/perl/5.6.1/perlsub.pod#Prototypes&#34;&gt;http://perldoc.jp/docs/perl/5.6.1/perlsub.pod#Prototypes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これにより、blockで、coderef を表現できるので、より簡潔な記法ができます
try 以外にも、grep, mapなどが身近な例だと思います&lt;/p&gt;

&lt;h3 id=&#34;coderef-を実行しながら-sumを取る関数を実装してみます:ed130a5c49b36845906533f63e9cb3a3&#34;&gt;coderef を実行しながら、sumを取る関数を実装してみます&lt;/h3&gt;

&lt;p&gt;まずは、prototypeを使わない例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use strict;
use warnings;
use utf8;
use Test::More;
use Test::Exception;
use Test::Perl::Critic;
use List::Util qw/sum/;

sub sum_map {
    my $cb = shift;
    sum map { $cb-&amp;gt;($_); } @_;
}

subtest &#39;basic&#39; =&amp;gt; sub {

    is sum_map(sub { $_[0] * 10 }, 1..10), 550;
};

subtest &#39;dies&#39; =&amp;gt; sub {

    dies_ok { sum_map { $_ * 10 }, 1..10; }

    # =&amp;gt;
    # Use of uninitialized value $_ in multiplication (*) at proto.pl line 23.
    # Odd number of elements in anonymous hash at proto.pl line 23.
    # Not a CODE reference at proto.pl line 10.
};

subtest &#39;critic&#39; =&amp;gt; sub {
    critic_ok($0);
};

done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次にprototypeを指定してみます&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use warnings;
use utf8;
use Test::More;
use Test::Exception;
use Test::Perl::Critic;
use List::Util qw/sum/;

sub sum_map (&amp;amp;@) {
    my $cb = shift;
    sum map { $cb-&amp;gt;($_) } @_;
}

subtest &#39;basic&#39; =&amp;gt; sub {

    my $ret = sum_map { $_ * 10 } 1..10;
    is $ret, 550;
};

subtest &#39;other use case&#39; =&amp;gt; sub {

    my $ret = sum_map(sub { $_[0] * 10 }, 1..10);
    is $ret, 550;
};

subtest &#39;critic&#39; =&amp;gt; sub {
    critic_ok($0); ## failed!!

    # not ok 1 - Test::Perl::Critic for &amp;quot;proto2.pl&amp;quot;
    # Failed test &#39;Test::Perl::Critic for &amp;quot;proto2.pl&amp;quot;&#39;
    #   at proto2.pl line 27.
    #
    # Perl::Critic found these violations in &amp;quot;proto2.pl&amp;quot;:
    # Subroutine prototypes used at line 9, column 1.  See page 194 of PBP.  (Severity: 5)
};

done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;critic のテストが通りませんでした
blockが coderef になっているのは、確かに副作用が強いです
その為、多用はしたくないです&lt;/p&gt;

&lt;p&gt;以下のように ## no critic と注釈をつけてあげて、
副作用を許容してあげることができます
&amp;gt; &lt;a href=&#34;http://search.cpan.org/~thaljef/Perl-Critic-1.123/lib/Perl/Critic.pm#BENDING_THE_RULES&#34;&gt;http://search.cpan.org/~thaljef/Perl-Critic-1.123/lib/Perl/Critic.pm#BENDING_THE_RULES&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use strict;
use warnings;
use utf8;
use Test::More;
use Test::Exception;
use Test::Perl::Critic;
use List::Util qw/sum/;

sub sum_map (&amp;amp;@) { ## no critic
    my $cb = shift;
    sum map { $cb-&amp;gt;($_) } @_;
}

subtest &#39;critic&#39; =&amp;gt; sub {
    critic_ok($0), &#39;注釈をつけることで回避&#39;;
};

done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;a-name-section6-ハマる例2-universal-a:ed130a5c49b36845906533f63e9cb3a3&#34;&gt;&lt;a name=&#34;section6&#34;&gt;ハマる例2? UNIVERSAL&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;間接オブジェクトわざとらしく使ってみたいと思います
&lt;code&gt;can&lt;/code&gt;を使っているのがわざとらしいです！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use strict;
use warnings;
use utf8;
use feature qw/say/;

my $dog = bless {}, &#39;Dog&#39;;

if (can $dog &#39;bow&#39;) {
    say &#39;can bow&#39;;
}
else {
    say &#39;cannot bow&#39;;
} # =&amp;gt; cannot bow

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#perl -MO=Deparse %

use utf8;
use warnings;
use strict;
use feature &#39;say&#39;;
my $dog = bless({}, &#39;Dog&#39;);
if ($dog-&amp;gt;can(&#39;bow&#39;)) {
    say &#39;can bow&#39;;
}
else {
    say &#39;cannot bow&#39;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;# original
if (can $dog &#39;bow&#39;)

# Deparse
if ($dog-&amp;gt;can(&#39;bow&#39;)) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$dogにcan methodは生やしていないですが、
Perlの場合、全てのクラスは暗黙的にUNIVERSAL を元にするようになっているので、
$dog-&amp;gt;can で UNIVERSAL-&amp;gt;can が呼び出しされます&lt;/p&gt;

&lt;p&gt;試しに、UNIVERSALのcanが呼び出しされないように、
このパッケージに &lt;code&gt;can&lt;/code&gt; というサブルーチンを生やしてみます&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use strict;
use warnings;
use utf8;
use feature qw/say/;

my $dog = bless {}, &#39;Dog&#39;;

sub can { 1 }

if (can $dog &#39;bow&#39;) { # XXX =&amp;gt; syntax error
    say &#39;can bow&#39;;
}
else {
    say &#39;cannot bow&#39;;
}

=pod

syntax error at can2.pl line 10, near &amp;quot;$dog &#39;bow&#39;&amp;quot;
can2.pl had compilation errors.
use utf8;
use warnings;
use strict;
use feature &#39;say&#39;;
my $dog = bless({}, &#39;Dog&#39;);
sub can {
    use warnings;
    use strict;
    use feature &#39;say&#39;;
    1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$dog と &amp;lsquo;bow&amp;rsquo; の間にカンマがなくて、エラーになりました
もちろんカンマを入れれば、次のように、&amp;rsquo;can bow&amp;rsquo;と表示されます&lt;/p&gt;

&lt;p&gt;このカンマのあるなしの意思表示で、間接記法であるかどうか示します
それは意思表示としては、わかりずらいので、誤読の元になりやすいです&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use strict;
use warnings;
use utf8;
use feature qw/say/;

my $dog = bless {}, &#39;Dog&#39;;

sub can { 1 }

if (can $dog, &#39;bow&#39;) { # リストにするため、カンマを入れた
    say &#39;can bow&#39;;
}
else {
    say &#39;cannot bow&#39;;
} # =&amp;gt; can bow

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように暗黙に定義されたメソッドで、間接オブジェクト記法が出てくるなんて、
あまりないと思いますが、良い機会なので、
UNIVERSALに生えているメソッドを洗ってみます&lt;/p&gt;

&lt;p&gt;Class::Inspector を使うと、&lt;code&gt;can, isa, VERSION, DOES&lt;/code&gt; ということが分かります
&lt;a href=&#34;http://perldoc.perl.org/UNIVERSAL.html&#34;&gt;http://perldoc.perl.org/UNIVERSAL.html&lt;/a&gt; の通りです
これで、もう多分、if (isa $foo &amp;lsquo;FOO&amp;rsquo;) とやってハマること？もないでしょう？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use strict;
use warnings;
use utf8;

package Dog;

sub new { bless {}, shift };

package main;

use Test::More;

my $dog = Dog-&amp;gt;new;

subtest &#39;isa&#39; =&amp;gt; sub {
    isa_ok $dog, &#39;Dog&#39;;
    isa_ok $dog, &#39;UNIVERSAL&#39;;
};

subtest &#39;methods&#39; =&amp;gt; sub {

    ok $dog-&amp;gt;can(&#39;can&#39;);
    ok $dog-&amp;gt;can(&#39;isa&#39;);
    ok $dog-&amp;gt;can(&#39;VERSION&#39;);
    ok $dog-&amp;gt;can(&#39;DOES&#39;);
};

subtest &#39;methods count&#39; =&amp;gt; sub {

    require Class::Inspector;
    is scalar @{Class::Inspector-&amp;gt;methods(&#39;UNIVERSAL&#39;)}, 4;

    is_deeply(Class::Inspector-&amp;gt;methods(&#39;Dog&#39;), [qw/new/]);
};

done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;a-name-section7-ハマる例3-テストにて-a:ed130a5c49b36845906533f63e9cb3a3&#34;&gt;&lt;a name=&#34;section7&#34;&gt;ハマる例3 テストにて&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;生々しいですが、例2のClass::Inspector を使っていて、今、ミスった例です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use strict;
use warnings;
use utf8;

package Dog;

sub new { bless {}, shift };

package main;
use Test::More;
use Class::Inspector;

is_deeply Class::Inspector-&amp;gt;methods(&#39;Dog&#39;), [qw/new/];
# XXX failed!!
# =&amp;gt; Can&#39;t locate object method &amp;quot;is_deeply&amp;quot; via package &amp;quot;Class::Inspector&amp;quot; at can5.pl line 12

=pod
use utf8;
package Dog;
sub new {
    use warnings;
    use strict;
    bless {}, shift();
}
package main;
sub BEGIN {
    use warnings;
    use strict;
    require Test::More;
    do {
        &#39;Test::More&#39;-&amp;gt;import
    };
}
use Class::Inspector;
use warnings;
use strict;
&#39;Class::Inspector&#39;-&amp;gt;is_deeply-&amp;gt;methods(&#39;Dog&#39;), [&#39;new&#39;];

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは、要点だけを絞り出すと次のようになっています&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;package Foo;
sub new { bless {}, shift() }

use strict;
use warnings;
use utf8;

use Test::More;

isa_ok Foo-&amp;gt;new, &#39;Foo&#39;;

done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;# Deparse

package Foo;
sub new {
    bless {}, shift();
}
use utf8;
use Test::More;
use warnings;
use strict;
&#39;Foo&#39;-&amp;gt;isa_ok-&amp;gt;new, &#39;???&#39;;
done_testing();
/Users/kfly8/aa.pl syntax OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際にはまった例では、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;is_deeply Class::Inspector-&amp;gt;methods(&#39;Dog&#39;), [qw/new/];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;が、次のように評価されてしまい、残念なことになりました&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;&#39;Class::Inspector&#39;-&amp;gt;is_deeply-&amp;gt;methods(&#39;Dog&#39;), [&#39;new&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;括弧付きで呼び出してあげてください&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;is_deeply(Class::Inspector-&amp;gt;methods(&#39;Dog&#39;), [&#39;new&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;a-name-section8-まとめ-a:ed130a5c49b36845906533f63e9cb3a3&#34;&gt;&lt;a name=&#34;section8&#34;&gt;まとめ&lt;/a&gt;&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Perl には、method を呼び出す方法に、method $obj LIST のような呼び出し方もあり、それを間接オブジェクト記法という&lt;/li&gt;
&lt;li&gt;使いどころを（すごい）選べば、import constant FOO =&amp;gt; &amp;lsquo;foo&amp;rsquo; のような簡潔な表現になる&lt;/li&gt;
&lt;li&gt;よくあるハマり方

&lt;ul&gt;
&lt;li&gt;関数のexport漏れ

&lt;ul&gt;
&lt;li&gt;余談 prototype&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;暗黙なmethod定義&lt;/li&gt;
&lt;li&gt;func Class-&amp;gt;foo の Class-&amp;gt;func-&amp;gt;foo という誤読しやすい評価順&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;a-name-section9-明日-a:ed130a5c49b36845906533f63e9cb3a3&#34;&gt;&lt;a name=&#34;section9&#34;&gt;明日&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;18日目は、&lt;a href=&#34;http://qiita.com/waniji&#34;&gt;wanji&lt;/a&gt; さんです！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#Perl入学式 のお手伝いさせてもらってきた</title>
      <link>http://kfly8.github.io/post/supported-perl-entrance/</link>
      <pubDate>Sun, 30 Nov 2014 19:02:59 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/supported-perl-entrance/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.perl-entrance.org/&#34;&gt;Perl入学式&lt;/a&gt; に参加するのは初めてだったのですが、
サポーターとして参加させてもらいました。
お疲れ様でした！特に講師のid:xtetsuji さんお疲れ様でした！!&lt;/p&gt;

&lt;p&gt;「サブルーチンと正規表現」がお題でした。
資料は&lt;a href=&#34;https://github.com/perl-entrance-org/workshop-2014-04/blob/master/slide.md&#34;&gt;コチラ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;寿司はコチラ。
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;Perl入学寿司 &lt;a href=&#34;https://twitter.com/hashtag/Perl%E5%85%A5%E5%AD%A6%E5%BC%8F?src=hash&#34;&gt;#Perl入学式&lt;/a&gt; (@ 立ち喰い寿司 都々井 in 品川区, 東京都) &lt;a href=&#34;https://t.co/dBvh02MXCZ&#34;&gt;https://t.co/dBvh02MXCZ&lt;/a&gt; &lt;a href=&#34;http://t.co/MVMMTHvfco&#34;&gt;pic.twitter.com/MVMMTHvfco&lt;/a&gt;&lt;/p&gt;&amp;mdash; OGATA Tetsuji (@xtetsuji) &lt;a href=&#34;https://twitter.com/xtetsuji/status/538527365635514368&#34;&gt;2014, 11月 29&lt;/a&gt;&lt;/blockquote&gt;
美味かった。&lt;/p&gt;

&lt;h1 id=&#34;面白かった-罠がコチラ:b9ad6d015439b1465565681b73a51293&#34;&gt;面白かった(?)罠がコチラ&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use strict;
use warnings;
use utf8;

sub dump_hash {
    my $hash = @_;
    $hash-&amp;gt;{foo};
}

dump_hash({foo =&amp;gt; 1, bar =&amp;gt; 2});
# =&amp;gt; Can&#39;t use string (&amp;quot;1&amp;quot;) as a HASH ref while &amp;quot;strict refs&amp;quot; in use at foo.pl line 7.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生徒:「&lt;code&gt;1&lt;/code&gt;って何?!?!」
おれ:「配列をスカラーで評価して、配列長..ですね&amp;hellip;」
生徒:「??????」
おれ:「ですよね!!!!!!!!」&lt;/p&gt;

&lt;p&gt;幸い？他のプログラミング言語を触っている人だったからか、
「Perlだと、どう値を使いたいか意思表示できて、
例えば、配列が欲しいのか、スカラが欲しいのかなど。
逆に言うと意思表示に慣れるまで、ハマります！！」
でコンテキストのことを濁し、次のような引数の取り方の例を見てもらったら納得してもらえたよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;sub dump_hash2 {
    my $h   = @_; # bad...
    my ($h) = @_; # ok (補足: 括弧が、優先順位の括弧に見えてしまったよう。 my ($a,$b) = @_ の例も併わせて紹介して、リストの括弧と分かってもらえた。
    my ($h,)= @_; # ok (さらに補足: 人によっては配列をより意識する為にこう書く人もいる
    my $h   = shift; # ok
    my $h   = $_[0]; # ok
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;蛇足にこんな例も話したら、楽しんでもらえたよう（多分）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;my @a  = (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;);
#my @a = qw/ a b c d /; # これで上と同じ意味

my %hash  = ( a =&amp;gt; 1, b =&amp;gt; 2 );
#my %hash = ( &#39;a&#39;, 1, &#39;b&#39;, 2 );  # これで上と同じ意味
#my %hash = qw/ a 1 b 2 /;  # これも同じ意味
my @b     = ( &#39;a&#39;, 1, &#39;b&#39;, 2 );  # さらに配列として受け止めることもできる
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;慣れるのは苦労するかもしれないけど、、、
例えば、「対になっているデータが欲しいから、ハッシュにしよう！」
とか思った時に、特にこねくり回したことしなくて良いのが、個人的に楽だと思っている。&lt;/p&gt;

&lt;h1 id=&#34;完全なる蛇足:b9ad6d015439b1465565681b73a51293&#34;&gt;完全なる蛇足&lt;/h1&gt;

&lt;p&gt;楽しみついでに、&lt;a href=&#34;https://github.com/perl-entrance-org/workshop-2014-04/blob/master/slide.md#%E3%82%B5%E3%83%96%E3%83%AB%E3%83%BC%E3%83%81%E3%83%B3%E3%81%AE%E5%AE%9A%E7%BE%A9-2&#34;&gt;サブルーチンの定義&lt;/a&gt;に関して、
「!」「数字」や「日本語」をサブルーチン名に使ったりする応用例？を書いた。&lt;/p&gt;

&lt;p&gt;この辺、YAPC::Asia 2014 のid:karupaneruraの&lt;a href=&#34;http://yapcasia.org/2014/talk/show/25f99ab0-fa15-11e3-b7e8-e4a96aeab6a4&#34;&gt;meta programmingの話&lt;/a&gt; が詳しい。(demoが多いので、動画がおすすめ）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use strict;
use warnings;
use utf8;

use Test::More;

{
    no strict qw/refs/;
    *{&#39;world!&#39;} = sub { &#39;world&#39; };
    is *{&#39;world!&#39;}{CODE}-&amp;gt;(), &#39;world&#39;, &#39;symbol table call&#39;;
}

done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use strict;
use warnings;
use utf8;

use Test::More;

sub こんにちは { &#39;hello&#39; }
is こんにちは(), &#39;hello&#39;;

done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;use strict;
use warnings;
use utf8;

use Test::More;
use Package::Stash;

my $stash = Package::Stash-&amp;gt;new(&#39;Foo&#39;);
$stash-&amp;gt;add_symbol(&#39;&amp;amp;hello world!&#39;, sub { &#39;hello&#39; });

subtest &#39;by get_symbol&#39; =&amp;gt; sub {
    my $code = $stash-&amp;gt;get_symbol(&#39;&amp;amp;hello world!&#39;);
    is $code-&amp;gt;(), &#39;hello&#39;
};

subtest &#39;by pkg&#39; =&amp;gt; sub {
    ok Foo-&amp;gt;can(&#39;hello world!&#39;), &#39;can?&#39;;
    my $code = Foo-&amp;gt;can(&#39;hello world!&#39;);
    is $code-&amp;gt;(), &#39;hello&#39;;

    my $method = &#39;hello world!&#39;;
    is Foo-&amp;gt;$method(), &#39;hello&#39;;
};

done_testing;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そんなこんなで、Perl入学式楽しませてもらいました！！
ありがとうございました！
またの機会もよろしくお願いします！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#chibapm 5で好き放題ランダウ記号の話をしてきた</title>
      <link>http://kfly8.github.io/post/chibapm5/</link>
      <pubDate>Sat, 11 Oct 2014 19:25:28 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/chibapm5/</guid>
      <description>&lt;p&gt;数学の話を息抜きにしてきた。
グラフが、写真なあたりまさに息抜き←手抜き&lt;/p&gt;

&lt;iframe src=&#34;//slides.com/kfly8/landau_symbol/embed&#34; width=&#34;576&#34; height=&#34;420&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;インデックス構造によって計算オーダーが変わったりするので、
云々かんぬんで久しぶりに数学に触れられて、楽しかった。&lt;/p&gt;

&lt;p&gt;#chibapmの懐の深さに感謝！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>isuconの予選で失格してきた</title>
      <link>http://kfly8.github.io/post/isucon2014/</link>
      <pubDate>Tue, 07 Oct 2014 16:28:16 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/isucon2014/</guid>
      <description>

&lt;p&gt;牡蠣途中&lt;/p&gt;

&lt;p&gt;運営の方々、楽しいイベントをありがとうございました！！
kuraチームのid:karupanerura, id:masasuz ありがとうございました！&lt;/p&gt;

&lt;p&gt;isucon中にやったこと&lt;/p&gt;

&lt;h2 id=&#34;サマリーテーブルを使って-ログインの成否を判定するようにした:ed9626afbad87fbe8fc7fd7c2dc6dee8&#34;&gt;サマリーテーブルを使って、ログインの成否を判定するようにした&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/karupanerura/isucon2014-elimination/commit/b81dcd38b7201c838ab49501a0a91984b13361b4&#34;&gt;https://github.com/karupanerura/isucon2014-elimination/commit/b81dcd38b7201c838ab49501a0a91984b13361b4&lt;/a&gt;
&lt;a href=&#34;https://github.com/karupanerura/isucon2014-elimination/commit/2daf40a936fc541841cc50fcb2c408fee7530444&#34;&gt;https://github.com/karupanerura/isucon2014-elimination/commit/2daf40a936fc541841cc50fcb2c408fee7530444&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;サマリーテーブルを使って-集計を出すようにした:ed9626afbad87fbe8fc7fd7c2dc6dee8&#34;&gt;サマリーテーブルを使って、集計を出すようにした&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/karupanerura/isucon2014-elimination/commit/f4bd9e12c1d17ef1dab601b745c82daed134e504&#34;&gt;https://github.com/karupanerura/isucon2014-elimination/commit/f4bd9e12c1d17ef1dab601b745c82daed134e504&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;紆余曲折があり、本戦中にちゃんとやり切れなかった。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;競技終了直前に気づいた不具合&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/karupanerura/isucon2014-elimination/commit/f4bd9e12c1d17ef1dab601b745c82daed134e504#diff-4f430011a6a953bf6b408bc9906c5478L171&#34;&gt;https://github.com/karupanerura/isucon2014-elimination/commit/f4bd9e12c1d17ef1dab601b745c82daed134e504#diff-4f430011a6a953bf6b408bc9906c5478L171&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;push @user_ids =&amp;gt; $row-&amp;gt;{login};


$row-&amp;gt;{login}...


＿人人人人人人人人人＿
＞　idじゃない！！　＜
￣Y^Y^Y^Y^Y^Y^Y^Y￣
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h2 id=&#34;userデータをオンメモリーにした:ed9626afbad87fbe8fc7fd7c2dc6dee8&#34;&gt;userデータをオンメモリーにした&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/karupanerura/isucon2014-elimination/commit/2ee1d266ea6f076556e578f17ed6bf4c6b8c60b1&#34;&gt;https://github.com/karupanerura/isucon2014-elimination/commit/2ee1d266ea6f076556e578f17ed6bf4c6b8c60b1&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;evalとか男前な実装になってすごいテンパっているなってなった&lt;/li&gt;
&lt;li&gt;せめてこう一発で書きたかった。。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/karupanerura/isucon2014-elimination/commit/7c6e6d2a1df780f6cfaa2d0c66f8797a85cb9ad2&#34;&gt;https://github.com/karupanerura/isucon2014-elimination/commit/7c6e6d2a1df780f6cfaa2d0c66f8797a85cb9ad2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h2 id=&#34;slack:ed9626afbad87fbe8fc7fd7c2dc6dee8&#34;&gt;slack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/karupanerura/isucon2014-elimination/issues/5&#34;&gt;https://github.com/karupanerura/isucon2014-elimination/issues/5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;捗った&lt;/p&gt;

&lt;p&gt;TODO&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>slides.comを使ってみた</title>
      <link>http://kfly8.github.io/post/web-service-slides/</link>
      <pubDate>Wed, 24 Sep 2014 00:52:11 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/web-service-slides/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://search.cpan.org/~yusukebe/App-revealup-0.08/lib/App/revealup.pm&#34;&gt;App::revealup&lt;/a&gt;で作成したslideを公開する時、
今までgithub.ioを使っていたのですが、
&lt;a href=&#34;https://github.com/hakimel/reveal.js/#online-editor&#34;&gt;reveal.js&lt;/a&gt;で紹介されている&lt;a href=&#34;http://slides.com/&#34;&gt;slides.com&lt;/a&gt;を使ってみました。&lt;/p&gt;

&lt;h1 id=&#34;結論:9304ad3432364e053c0046abfe33f1c5&#34;&gt;結論&lt;/h1&gt;

&lt;p&gt;markdownを作ってスライド作るワークフローはほとんど（後述）変えずに
簡単にスライドが用意できて、さらに以下のようなメリットがあったので、
個人的にはもっとslides.com 使いたいなーと思いました！&lt;/p&gt;

&lt;p&gt;（スライドの内容はともかく）試しに作成した結果
&lt;iframe src=&#34;//slides.com/kfly8/isucon_ttp/embed?style=light&#34; width=&#34;576&#34; height=&#34;420&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;元々はこんな感じ。-&amp;gt;
&lt;a href=&#34;http://kfly8.github.io/doc/2014-09-17_gotandapm/&#34;&gt;slide&lt;/a&gt; /
&lt;a href=&#34;https://github.com/kfly8/doc/tree/gh-pages/2014-09-17_gotandapm&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;メリット:9304ad3432364e053c0046abfe33f1c5&#34;&gt;メリット&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://help.slides.com/knowledgebase/articles/254996-embedding-decks&#34;&gt;embedらくちんにできる！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;プレゼン機能が充実してる！

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://help.slides.com/knowledgebase/articles/333923&#34;&gt;スピーカーノート用意できて、スピーカー用のビューが用意されてる！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://help.slides.com/knowledgebase/articles/333925-remote-control&#34;&gt;リモートコントロールできる！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://help.slides.com/knowledgebase/articles/333924-live-streaming&#34;&gt;live streaming 機能ある！&lt;/a&gt; かっこいい！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Social 機能ある！

&lt;ul&gt;
&lt;li&gt;twitterとかのsocial mediaボタン！&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://help.slides.com/knowledgebase/articles/255205-comments&#34;&gt;コメント機能！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スライドが、HTMLなのでモバイル端末で見た時に見やすい（見やすくできる）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://help.slides.com/knowledgebase/articles/405697-custom-html&#34;&gt;やろうと思えばhtmlをだいたい直接修正できる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スライドを公開した後に修正できる（良くも悪くも）&lt;/li&gt;
&lt;li&gt;revealjsの機能をより最大限に活かしやすい

&lt;ul&gt;
&lt;li&gt;iframeでビデオを再生したりできる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;exportされるhtmlが、1 file

&lt;ul&gt;
&lt;li&gt;(revealjsとかの読み込みとかlibファイルのこと考えなくていい）&lt;/li&gt;
&lt;li&gt;有料オプションでpdfへのexportやDropboxへのsyncなどもできる&lt;/li&gt;
&lt;li&gt;さらに、&lt;a href=&#34;http://help.slides.com/forums/175819-general/suggestions/3173469-github-integration&#34;&gt;sync先にgithubにするようなissueもあがっている&lt;/a&gt;ようなので、期待age&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://help.slides.com/knowledgebase&#34;&gt;ヘルプ一覧&lt;/a&gt;にはもっと他の機能についての紹介が
簡潔に書いてあって、わかりやすい！&lt;/p&gt;

&lt;h1 id=&#34;やること:9304ad3432364e053c0046abfe33f1c5&#34;&gt;やること&lt;/h1&gt;

&lt;p&gt;markdownで作ったスライドを、slides.comにあげる為にやることは、
大きく一つだけ。&lt;/p&gt;

&lt;p&gt;markdownから適当なHTMLファイルを用意してimportするだけ。
importについては&lt;a href=&#34;http://help.slides.com/knowledgebase/articles/271213-import-from-reveal-js&#34;&gt;コチラ&lt;/a&gt;を参照&lt;/p&gt;

&lt;h2 id=&#34;importするhtmlの用意:9304ad3432364e053c0046abfe33f1c5&#34;&gt;importするHTMLの用意&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;App::revealupで立ち上げたスライド(0.0.0.0:5000を想定)を、Chrome経由で保存（Cmd+S）((外部ファイルのmarkdownをhtml tagに展開した物が欲しいのでこんなことやってる。展開済みのhtmlを用意できればなんでもいい。展開するときに、画像パスとdata-markdown属性だけ気をつける))&lt;/li&gt;
&lt;li&gt;画像のパスを絶対パスに変えてあげる&lt;/li&gt;
&lt;li&gt;data-markdown=&amp;ldquo;&amp;rdquo; 属性を消す&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;雑だけど、つまりこんな感じ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Cmd+S
vim 0.0.0.0.html
:%s;./0.0.0.0_files;https://dl.dropboxusercontent.com/u/XXX/img/YYY;gc
:%s;data-markdown=&amp;quot;&amp;quot;;;g
:cat % | pbcopy
# -&amp;gt; slides.comの編集画面からimport
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを自動化できればもっと楽そう。((slides.comがmarkdownのimportに対応すればもっと楽ではある、、))&lt;/p&gt;

&lt;h1 id=&#34;まとめ:9304ad3432364e053c0046abfe33f1c5&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;slides.comを使えば、markdownでスライド作るワークフローは殆ど変えずに、
プレゼン面、ソーシャルメディアの面で多くのメリットが得られて、幸せ！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#gotandapm たのしんできた</title>
      <link>http://kfly8.github.io/post/gotandapm2/</link>
      <pubDate>Fri, 19 Sep 2014 13:22:07 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/gotandapm2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://gotanda-pm.connpass.com/event/8404/&#34;&gt;Gotanda.pm #2&lt;/a&gt;で
飲んだり発表したり話を聞いたり飲んだりしてきました１
主催のid:karupaneruraありがとうございました！！！！！&lt;/p&gt;

&lt;p&gt;isucon楽しい！！！！ので参加すると良いって気持ちで発表してきました&amp;gt;&amp;lt;&lt;/p&gt;

&lt;iframe src=&#34;//slides.com/kfly8/isucon_ttp/embed?style=light&#34; width=&#34;576&#34; height=&#34;420&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;gotandapmはまた１２月の開催されるそうで楽しみです！！！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://instagram.com/p/spC-tSoDCr/&#34;&gt;&lt;img src=&#34;http://instagram.com/p/spC-tSoDCr/media/?size=l&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ほんとにあったスキーマの話「ソーシャルゲーム」と題して、YAPCのトーク応募してみた</title>
      <link>http://kfly8.github.io/post/apply-yapcasia2014/</link>
      <pubDate>Fri, 04 Jul 2014 16:08:19 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/apply-yapcasia2014/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://yapcasia.org/2014/talk/list&#34;&gt;YAPC::Asiaのトーク&lt;/a&gt;の応募数が尋常じゃないので、駆け込みブログです&amp;gt;&amp;lt;
(YAPC終わった後に、yet another yapcをするしかないんじゃないか？！)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yapcasia.org/2014/talk/show/ce6e777e-fb91-11e3-b7e8-e4a96aeab6a4&#34;&gt;http://yapcasia.org/2014/talk/show/ce6e777e-fb91-11e3-b7e8-e4a96aeab6a4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;アプリケーション層でも、コードの規模感が少し大きくなった、
「続・初めてのPerl」くらいなレベル感な話になれば、、いいな、、と思っています。&lt;/p&gt;

&lt;p&gt;以下はなんとなく話せればと思う事の断片。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kfly8/d2d23c435801551a278f.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Hello Android</title>
      <link>http://kfly8.github.io/post/hello-android/</link>
      <pubDate>Mon, 20 Jan 2014 22:52:40 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/hello-android/</guid>
      <description>

&lt;p&gt;いまさら、、あんどろいどにはろーわーるどしました（え&lt;/p&gt;

&lt;p&gt;備忘録です。
MyFirstAppを作成するところまでは手順通りだった。それだけなのにつかれる事態になってしまった＞＜&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/training/basics/firstapp/creating-project.html&#34;&gt;http://developer.android.com/training/basics/firstapp/creating-project.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/training/basics/firstapp/running-app.html&#34;&gt;http://developer.android.com/training/basics/firstapp/running-app.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ant-debugでまずはまった:c514a214a968f397327dc15c76174bb7&#34;&gt;ant debugでまずはまった&lt;/h1&gt;

&lt;h2 id=&#34;まず-ant-がないと怒られる-次で解決:c514a214a968f397327dc15c76174bb7&#34;&gt;まず、ant がないと怒られる。次で解決&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew update
brew install ant
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://superuser.com/questions/610157/how-do-i-install-ant-on-os-x-mavericks&#34;&gt;http://superuser.com/questions/610157/how-do-i-install-ant-on-os-x-mavericks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ほんとはbrew updateも諸処とおらず、brew doctorでPATH変更したりごにょごにょした&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;build-xmlがなくて-buildできない:c514a214a968f397327dc15c76174bb7&#34;&gt;build.xmlがなくて、buildできない&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;android update で解決
&lt;code&gt;sh
android update project --name MyFirstApp --target android-19 --path ~/android/workspace/MyFirstApp
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/5572304/building-android-sample-project-using-ant&#34;&gt;http://stackoverflow.com/questions/5572304/building-android-sample-project-using-ant&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;targetは、MyFirstApp/local.properticesから参照した&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;apkを端末にインストールできなくてはまった:c514a214a968f397327dc15c76174bb7&#34;&gt;apkを端末にインストールできなくてはまった&lt;/h1&gt;

&lt;h2 id=&#34;error-device-offline:c514a214a968f397327dc15c76174bb7&#34;&gt;error: device offline&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;adb devicesしてもでてこない。端末外して、次をしてから、接続し直して解決。
&lt;code&gt;sh
adb kill-server
adb start-server
&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/10680417/error-device-offline&#34;&gt;http://stackoverflow.com/questions/10680417/error-device-offline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;error-more-than-one-device-and-emulator:c514a214a968f397327dc15c76174bb7&#34;&gt;error: more than one device and emulator&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;端末を指定して解決
&lt;code&gt;sh
% adb devices
List of devices attached
emulator-5554   offline
XXX      device
% adb -s XXX  install bin/MyFirstApp-debug.apk
&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yktmnb.b.sourceforge.jp/?p=20&#34;&gt;http://yktmnb.b.sourceforge.jp/?p=20&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とりあえず、はろーあんどろいど&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>isucon に負けて悔しいので、問題を速く解決するためのパターンを考えてみた</title>
      <link>http://kfly8.github.io/post/isucon2013/</link>
      <pubDate>Sat, 30 Nov 2013 20:03:31 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/isucon2013/</guid>
      <description>

&lt;p&gt;isucon決勝からもうだいぶ日が経ってしまいました、、その間、負けて、id:karupanerura先生に、げきおこされる夢も見ました。&lt;/p&gt;

&lt;p&gt;振り返ります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://isucon.net/&#34;&gt;isucon&lt;/a&gt;でスコアを残しているチームは技術力もさることながら、
問題解決能力が高いと思うのです。もの凄く。&lt;/p&gt;

&lt;p&gt;近づくにはどうすればいいんだろうと、頭の整理のために、
自分が普段感じている問題解決のパターンを書いてみました。
特にisuconの反省なので、与えられた問題を良い感じに速くするための解決方法寄りだと思います。&lt;/p&gt;

&lt;h1 id=&#34;パターン:6bd210cb6ce0dfbbe8ac0198724aefdc&#34;&gt;パターン&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;処理((仕事に置き換えても面白いかも？))しない&lt;/li&gt;
&lt;li&gt;処理したらメモしておく&lt;/li&gt;
&lt;li&gt;処理の下準備をする&lt;/li&gt;
&lt;li&gt;処理をまとめる&lt;/li&gt;
&lt;li&gt;処理を少なくする&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;処理を外にお願いする&lt;/li&gt;
&lt;li&gt;必要な分だけ、処理する&lt;/li&gt;
&lt;li&gt;処理を得意な人にお願いする&lt;/li&gt;
&lt;li&gt;処理関係者を減らす&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;処理するヒトを増やす&lt;/li&gt;
&lt;li&gt;処理できるヒトを良くする&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;仕様を仕様を削る&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;「isucon知識足りなくて、負けたわー、じゃー、ほげほげ勉強しよう！」っていうんじゃ、
思考停止だと思っています。&lt;/p&gt;

&lt;p&gt;また知らない技術領域が出て来ても、
どうにかこうにか対応できるようになりたいなーと思った感じです
（知識不足は、ちゃんと補完しなきゃですが、、）&lt;/p&gt;

&lt;p&gt;箇条書きで終わりもアレなので、
良い例かは分からないですが、パッと思いつく例を書いてみます。&lt;/p&gt;

&lt;h3 id=&#34;処理しない:6bd210cb6ce0dfbbe8ac0198724aefdc&#34;&gt;処理しない&lt;/h3&gt;

&lt;p&gt;一番、大事なことだと思います。処理しないで、済むなら、処理しない。
やらないですむなら、やらない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たたきこみ&lt;/p&gt;

&lt;h3 id=&#34;処理したらメモしておく:6bd210cb6ce0dfbbe8ac0198724aefdc&#34;&gt;処理したらメモしておく&lt;/h3&gt;

&lt;p&gt;今回のisucon決勝なら、画像投稿時、ないし、初回呼び出し時などで、キャッシュをするなど。&lt;/p&gt;

&lt;p&gt;どこでキャッシュするか、いつキャッシュするか、メモしたものをどう更新するかは色々ですが、やったことは、またやりたくないというのは（領域が許せば）良い。&lt;/p&gt;

&lt;h3 id=&#34;処理の下準備をする:6bd210cb6ce0dfbbe8ac0198724aefdc&#34;&gt;処理の下準備をする&lt;/h3&gt;

&lt;p&gt;indexや、辞書作りなどの学習&lt;/p&gt;

&lt;h3 id=&#34;処理をまとめる:6bd210cb6ce0dfbbe8ac0198724aefdc&#34;&gt;処理をまとめる&lt;/h3&gt;

&lt;p&gt;都度の処理呼び出しコストを減らす。
描画処理を減らすために、DOMに書き出さないなど。&lt;/p&gt;

&lt;h3 id=&#34;処理を少なくする:6bd210cb6ce0dfbbe8ac0198724aefdc&#34;&gt;処理を少なくする&lt;/h3&gt;

&lt;p&gt;処理を無くせはしないけど、少なくすることはできるっていうのはある。
処理内容が減れば、大小あれど、一応嬉しい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# あるある
$dbh-&amp;gt;query() for 1..100
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;ここから、ちょっと、トレードオフが大きくなりそうな、パターン。&lt;/p&gt;

&lt;h3 id=&#34;処理を外にお願いする:6bd210cb6ce0dfbbe8ac0198724aefdc&#34;&gt;処理を外にお願いする&lt;/h3&gt;

&lt;p&gt;処理が完了するまで、次の処理が出来ないのはもったいない
なので、他の人にお願いしたくなったりすることもある&lt;/p&gt;

&lt;h3 id=&#34;必要な分だけ処理する:6bd210cb6ce0dfbbe8ac0198724aefdc&#34;&gt;必要な分だけ処理する&lt;/h3&gt;

&lt;p&gt;重い処理の割には、意外と使われなくて、事前準備してなくて構わないというのはあるなと。
そしたら、必要になったときに、処理すればよい。&lt;/p&gt;

&lt;h3 id=&#34;処理を得意な人にお願いする:6bd210cb6ce0dfbbe8ac0198724aefdc&#34;&gt;処理を得意な人にお願いする&lt;/h3&gt;

&lt;p&gt;言語レベルか、機械レベルか、ソフトウェアか、、など。
これで良さそうな判断ができるかどうかは知識量に凄い左右されると思っている。&lt;/p&gt;

&lt;p&gt;それでも得意な人にお願いしたいというのは変わらないはず。
使いこなせる武器が多いのは、視点が高くなる。&lt;/p&gt;

&lt;h3 id=&#34;処理関係者を減らす:6bd210cb6ce0dfbbe8ac0198724aefdc&#34;&gt;処理関係者を減らす&lt;/h3&gt;

&lt;p&gt;全てを一番ベストな人にお願いしても、１０００箇所で処理が行われるとしたら、
その処理の受け渡しのコストが目につくかもしれない。&lt;/p&gt;

&lt;h3 id=&#34;処理するヒトを増やす:6bd210cb6ce0dfbbe8ac0198724aefdc&#34;&gt;処理するヒトを増やす&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1人でやるより、2人で処理出来る方が捗ることもある。&lt;/li&gt;
&lt;li&gt;スケールアウト&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;処理できるヒトを良くする:6bd210cb6ce0dfbbe8ac0198724aefdc&#34;&gt;処理できるヒトを良くする&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;スケールアップ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;仕様を削る:6bd210cb6ce0dfbbe8ac0198724aefdc&#34;&gt;仕様を削る&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;その仕様、、、、その仕様、、い、、るかも、、いや、いら、らないかも、、　っていうのは、バッサバッサ切れればいいね。&lt;/li&gt;
&lt;li&gt;難しい処理の方がお金になったりすることもあるから、難しいね。でも無駄なのもあるよね。&lt;/li&gt;
&lt;li&gt;エンジニアから、一歩踏み出すのも、問題解決する為の一つの手段。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;最後に:6bd210cb6ce0dfbbe8ac0198724aefdc&#34;&gt;最後に&lt;/h1&gt;

&lt;p&gt;id:karupanerura先生、id:masasuz先生、牡蠣鍋打ち上げしましょう&amp;gt; &amp;lt;&lt;/p&gt;

&lt;p&gt;KAYACさん、LINEさん、isuconありがとうございました！！！！！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://instagram.com/p/gvFRWwIDIR/&#34;&gt;&lt;img src=&#34;http://instagram.com/p/gvFRWwIDIR/media/?size=l&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TypeScriptさわるぞー #TODO</title>
      <link>http://kfly8.github.io/post/hello-typescript/</link>
      <pubDate>Sat, 16 Nov 2013 18:18:56 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/hello-typescript/</guid>
      <description>

&lt;p&gt;jsを大きな規模でもちゃんと動くようにしたいと、のたまったので、
偉い人たちが作ったaltjsを勉強させてもらいます　ref &lt;a href=&#34;http://kfly8.hatenablog.com/entry/2013/11/16/005340&#34;&gt;http://kfly8.hatenablog.com/entry/2013/11/16/005340&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/search?q=%23%E7%99%BA%E7%81%AB%E6%9D%91&amp;amp;src=hash&#34;&gt;#発火村&lt;/a&gt; 中、id:gfx 先生におすすめしてもらった&lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;を見てみます＞＜&lt;/p&gt;

&lt;p&gt;ぱっと見: # TODO&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jsのsuperset&lt;/li&gt;
&lt;li&gt;見た目はほとんど一緒&lt;/li&gt;
&lt;li&gt;I/Fに型を添えて分かりやすくしている&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;導入:16f5c50449091024254daf50b90fa107&#34;&gt;導入&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;% npm install -g typescript
% cat &amp;gt; hello.ts
function hello(s: string) {
  return &#39;hello &#39; + s;
}
console.log(hello(&#39;typescript&#39;));
^D
% tsc hello.ts
% node hello.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;grunt-typescrpt:16f5c50449091024254daf50b90fa107&#34;&gt;grunt-typescrpt&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install grunt-typescript
https://github.com/kfly8/ts-sample
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;typescriptのドキュメントのメモ:16f5c50449091024254daf50b90fa107&#34;&gt;TypeScriptのドキュメントのメモ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.typescriptlang.org/Content/TypeScript%20Language%20Specification.pdf&#34;&gt;http://www.typescriptlang.org/Content/TypeScript%20Language%20Specification.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;TODO あとで読みやすくして、検証する、、、ほとんどこぴぺだよ、やばいよやばいよ&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;types:16f5c50449091024254daf50b90fa107&#34;&gt;Types&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// primitive type. ( number, boolean, string, void, null and undefined and user defined enum types)
function hello(str: string) {
    return &#39;hello&#39; + str;
}

// function type
function hoge(callback: (result: string) =&amp;gt; any ) {
    ...
}

hoge(function(result: string) {
    ...
});

// object type

// * object type literal ( ObjectType,ArrayType,FunctionType and ConstructorType  )
var aaa: () =&amp;gt; {
    x: number; y: number;
};

// * object type interface // PerlのMouseTypeみたい
interface Friend {
    name: string;
    birthday?: string; # optional field
}

function add(friend: Friend) {
    var name = friend.name;
}

add({ name: &#39;taro&#39; });
add({ birthday: &#39;20130101&#39; }); # error, name required
add({ name: &#39;hanako&#39;, birthday: &#39;20130201&#39; });


// Structial Subtypes

interface Point {
    x: number;
    y: nubmer;
}

function getX(p: Point) {
}

Class CPoint {
    x: number;
    y: number;
    constructor(x: number, y: number) {
        this.x = x;
        this.y = y;
    }
}

getX(new CPoint(0,0)); // ok!!
getX({ x: 1, y: 2: z: 3); // ok!! Extra fields ok
getX({ x: 1 ); // ng!! supplied parameter&#39;s not Point

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;class-module:16f5c50449091024254daf50b90fa107&#34;&gt;Class &amp;amp;&amp;amp; Module&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Animal {
    constructor(public age: number) {
    }
    addAge(amount: number) {
        this.age += amount;
        return this.age;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Animal = (function () {
    function Animal() {
        this.age = 0;
    }
    Animal.prototype.addAge = function(amount) {
        this.age += amount;
        return this.age;
    };
    return Animal;
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module Hoge {
    var s = &amp;quot;hello&amp;quot;;
    export function f() {
        return s;
    }
}

Hoge.f();
Hoge.s; // Error, s is not exported // variable &#39;s&#39; is private
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Hoge;
(function(exports) {
    var s = &amp;quot;hello&amp;quot;;
    function f() {
        return s;
    }
    exports.f = f;
})(Hoge||(Hoge={}));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;declare:16f5c50449091024254daf50b90fa107&#34;&gt;declare&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;declare var document;
document.title = &amp;quot;Hello&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;外部モジュール:16f5c50449091024254daf50b90fa107&#34;&gt;外部モジュール&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;# File main.ts:
import log = require(&amp;quot;log&amp;quot;);
log.message(&amp;quot;hello&amp;quot;);

# File log.ts:
export function message(s: string) {
    console.log(s);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
# point.ts
export = Point;
class Point {
    constructor(public x: number, public y: number) { }
    static origin = new Point(0, 0);
}

# use
import Pt = require(&amp;quot;point&amp;quot;);
var p1 = new Pt(10, 20);
var p2 = Pt.origin;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://atnd.org/events/43858&#34;&gt;温泉発火村&lt;/a&gt;なう&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://instagram.com/p/gw7VF5IDPl/&#34;&gt;&lt;img src=&#34;http://instagram.com/p/gw7VF5IDPl/media/?size=l&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://instagram.com/p/gw7VF5IDPl/&#34;&gt;#発火村 ！！！！！！！！！！！&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>大規模なjsってどうして書きにくい？</title>
      <link>http://kfly8.github.io/post/why-difficult-to-write-js/</link>
      <pubDate>Sat, 16 Nov 2013 00:53:40 +0900</pubDate>
      
      <guid>http://kfly8.github.io/post/why-difficult-to-write-js/</guid>
      <description>

&lt;p&gt;フロントサイドでの話です。&lt;/p&gt;

&lt;p&gt;そんな話を、id:karupanerura と&lt;a href=&#34;http://www.zusaar.com/event/1737003&#34;&gt;#isucon反省会&lt;/a&gt;帰り、東海道線で話した&lt;/p&gt;

&lt;p&gt;２人で話した答え:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「パッケージの責任範囲を小さくするベストプラクティスが分からない」&lt;/li&gt;
&lt;li&gt;つまりは「コードを読む範囲を小さくしたい」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所感:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;よしなに&amp;rdquo;やってくれるって、&amp;rdquo;なんかこわい&amp;rdquo;

&lt;ul&gt;
&lt;li&gt;jsのフロントサイドのライブラリって何となくそういうの多い気がする&lt;/li&gt;
&lt;li&gt;作るのも大変&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CPANのように客観的によくテストする仕組みがあれば、使う人も作る人も幸せになれる？&lt;/li&gt;
&lt;li&gt;一つのことを上手くやる小さなモジュールを組み合わせたい&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;どうやって解決するか:a4a4c87ac166d9b91d6cbdab97b38561&#34;&gt;どうやって解決するか？&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;モジュールを決められた仕様で書いて、requireして使うcommonjsライクがいいんでは？と話した

&lt;ul&gt;
&lt;li&gt;モジュール毎にHTTP Requestするのはいやなので、concatとかもしやすくしたい&lt;/li&gt;
&lt;li&gt;【追記】せっかく非同期に読み込むこともできるのだから、依存関係解決しながらいい感じに読み込むめばいいのか、、と思うと、require.jsでいいのか 、、このサポートのことは一旦忘れよう、&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例えば、以下のようにfoo,bar.jsというモジュールを作り、、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# lib/foo.js
exports.foo = function() {...};
# lib/bar.js
exports.bar = function() {...};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;package.jsonやcpanfileのようなpackagefileを書くと、、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;require lib/foo.js;
require lib/bar.js;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gruntのようなビルドツールでビルドして、、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# generate file
SHELL% BUILD aaa # generate aaa.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;requireして、各モジュールが使える&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;# some.html
&amp;lt;script src=&amp;quot;aaa.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
(function() {
    var foo = aaa.require(&#39;foo&#39;); # source.mapも利用しやすいはず
    var bar = aaa.require(&#39;bar&#39;);
})();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テストは、npm test とか&lt;/p&gt;

&lt;h1 id=&#34;最後:a4a4c87ac166d9b91d6cbdab97b38561&#34;&gt;最後&lt;/h1&gt;

&lt;p&gt;上のようなことなら、個人でやる分には素直に書けるけど、、最初の命題に対するアプローチどうなんだろうか、、？jsの何が一番いけてない？&lt;/p&gt;

&lt;p&gt;すばらしいライブラリやaltjsがあるというのに、jsを書くというアプローチ、、
悪い言い方ですが、臭いモノの蓋を開けても、そんなに臭わないようにしたいなーというそんな願望の現れです。かっこつければ、js書くのが楽しくなれば、それはそれで意義深いかも？！という感じでございます。&lt;/p&gt;

&lt;p&gt;以上！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>